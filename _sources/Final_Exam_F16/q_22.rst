.. _Final_Exam_F16/q_22:

Final Exam Fall 2016 - Questions 22
-----------------------------------


.. activecode:: Final_Exam_F16_q_22
   :language: python
   :autograde: unittest
   :chatcodes:
   :practice: T
   :topics: Final_Exam_F16/q_22

   Complete the code below to define **canFly**.

   ~~~~

   class Pet():
      is_pet = True

      def __init__(self, name, pet_type):
         self.name = name
         self.pet_type = pet_type

      def canFly(self):
         # Should return True if self's pet_type instance
         # variable is 'bird' or 'fly' and False otherwise



   class Cat(Pet):
      is_cat = True

      def __init__(self, name, has_claws):
         Pet.__init__(self, name, 'cat')
         self.clawed = has_claws

      def canScratch(self):
         return self.clawed

   garfield = Cat('Garfield', False)
   cheshire = Pet('Cheshire', 'cat')

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

     def testOne(self):
         garfield = Cat('Garfield', False)
         self.assertEqual(garfield.canFly(), False, "Testing whether ``garfield.canFly()`` returns the right value.")
         cheshire = Pet('Cheshire', 'cat')
         self.assertEqual(cheshire.canFly(), False, "Testing whether ``cheshire.canFly()`` returns the right value.")
         self.assertEqual(Pet('sparrow', 'bird').canFly(), True, "Testing whether ``Pet('sparrow', 'bird').canFly()`` returns the right value.")
         self.assertEqual(Pet('housefly', 'fly').canFly(), True, "Testing whether ``Pet('housefly', 'fly').canFly()`` returns the right value.")

   myTests().main()
