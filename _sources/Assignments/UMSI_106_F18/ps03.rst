.. _problem_set_03:

Problem Set 3
-------------

**Instructions:** Write the code you want to save in the provided boxes, and click **Save & Run** for each one. That will  *run* your code, so you can see the output, if any, and the result of the tests, if there are any. It will also *save* your code. You should run your code each time you want to save it. You can then load the history of the code you have run and saved. The *last* code you have saved for each problem by the deadline is what will be graded.


.. activecode:: ps_03_01
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPattern

    ``rainfall_mi`` is a string that contains the average number of inches of rainfall in Michigan for every month (in inches) with every month separated by a comma.
    Write code to compute the number of months that have more than 3 inches of rainfall. Store the result in the variable ``num_rainy_months``.
    In other words, count the number of items with values ``> 3.0``.


    Hard-coded answers will receive no credit.
    ~~~~
    rainfall_mi = "1.65, 1.46, 2.05, 3.03, 3.35, 3.46, 2.83, 3.23, 3.5, 2.52, 2.8, 1.85"
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertIn('for', self.getEditorText(), "Testing that your code has a for loop (Don't worry about actual and expected values).")
            self.assertEqual(num_rainy_months, 5, "Testing that num_rainy_months has the right value")

    myTests().main()

.. activecode:: ps_03_02
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPattern

    The variable ``sentence`` stores a string. Write code to determine how many words in ``sentence`` start and end with the same letter, including one-letter words.
    Store the result in the variable ``same_letter_count``.


    Hard-coded answers will receive no credit.
    ~~~~
    sentence = "students flock to the arb for a variety of outdoor activities such as jogging and picnicking"

    # Write your code here.

    ====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(same_letter_count, 2, "Checking that same_letter_count has the correct value")

    myTests().main()

.. activecode:: ps_03_03
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPattern

    Write code to count the number of strings in list ``items`` that have the character ``w`` in it. Assign that number to the variable ``acc_num``.

    HINT 1: Use the accumulation pattern!

    HINT 2: the ``in`` operator checks whether a substring is present in a string.


    Hard-coded answers will receive no credit.
    ~~~~
    items = ["whirring", "wow!", "calendar", "wry", "glass", "", "llama","tumultuous","owing"]
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertIn(' in ', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
            self.assertEqual(acc_num, 4, "Testing that acc_num has been set to the number of strings that have 'w' in them.")

    myTests().main()

.. activecode:: ps_03_04
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPattern

    Write code that counts the number of words in ``sentence`` that contain *either* an "a" or an "e". Store the result in the variable ``num_a_or_e``.

    Note 1: be sure to not double-count words that contain both an a and an e.

    HINT 1: Use the ``in`` operator.

    HINT 2: You can either use ``or`` or ``elif``.


    Hard-coded answers will receive no credit.
    ~~~~
    sentence = "python is a high level general purpose programming language that can be applied to many different classes of problems."
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertIn(' in ', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
            self.assertEqual(num_a_or_e, 14, "Testing that num_a_or_e has been set to the correct number.")

    myTests().main()


.. activecode:: ps_03_05
    :language: python
    :autograde: unittest
    :practice: T
    :topics: DictionaryAccumulation/intro-AccumulatingMultipleResultsInaDictionary

    The dictionary ``Junior`` shows a schedule for a junior year semester. The key is the course name and the value is the number of credits. Find the total number of credits taken this semester and assign it to the variable ``credits``. Do not hardcode this -- use the accumulation pattern!
    ~~~~
    courses = {'SI 206':4, 'SI 310':4, 'BL 300':3, 'TO 313':3, 'BCOM 350':1, 'MO 300':3}
    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(credits, 18, "Testing that credits is assigned to correct values")

    myTests().main()



.. activecode:: ps_03_06
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Dictionaries/intro-Dictionaries

    The dictionary ``umSchools`` maps the names of schools at Michigan to the year they were founded.
    Write code that assigns the year that the School of Information was founded to the variable ``si_founded`` (so ``si_founded`` should end up with the value ``1996``).

    Hard-coded answers will receive no credit.
    ~~~~
    umSchools = {
      "A. Alfred Taubman College of Architecture & Urban Planning": 1906,
      "College of Engineering": 1854,
      "College of Literature, Science, and the Arts": 1841,
      "Gerald R. Ford School of Public Policy": 1914,
      "Horace H. Rackham School of Graduate Studies": 1912,
      "Penny W. Stamps School of Art & Design": 1974,
      "School of Dentistry": 1875,
      "School of Education": 1921,
      "School of Information": 1996,
      "School of Kinesiology": 1984,
      "School of Law": 1859,
      "School of Medicine": 1850,
      "School of Music, Theatre & Dance": 1880,
      "School of Natural Resources & Environment": 1927,
      "School of Nursing": 1893,
      "School of Pharmacy": 1876,
      "School of Public Health": 1941,
      "School of Social Work": 1951,
      "Stephen M. Ross School of Business": 1924
    }
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(si_founded, 1996, "Testing that si_founded has been set to the correct value")

    myTests().main()


.. activecode:: ps_03_07
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPatternwithLists

    The dictionary ``umSchools`` maps the names of schools at Michigan to the year they were founded.
    Write code to add the name of every school that was founded in the 20th century (after 1900) into a list ``newer_schools``.

    Hard-coded answers will receive no credit.
    ~~~~
    umSchools = {
      "A. Alfred Taubman College of Architecture & Urban Planning": 1906,
      "College of Engineering": 1854,
      "College of Literature, Science, and the Arts": 1841,
      "Gerald R. Ford School of Public Policy": 1914,
      "Horace H. Rackham School of Graduate Studies": 1912,
      "Penny W. Stamps School of Art & Design": 1974,
      "School of Dentistry": 1875,
      "School of Education": 1921,
      "School of Information": 1996,
      "School of Kinesiology": 1984,
      "School of Law": 1859,
      "School of Medicine": 1850,
      "School of Music, Theatre & Dance": 1880,
      "School of Natural Resources & Environment": 1927,
      "School of Nursing": 1893,
      "School of Pharmacy": 1876,
      "School of Public Health": 1941,
      "School of Social Work": 1951,
      "Stephen M. Ross School of Business": 1924
    }
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            a = [s for s in umSchools if umSchools[s]>1900]
            self.assertEqual(sorted(newer_schools), sorted(a), "Testing that newer_schools has been set to the correct value")

    myTests().main()


.. activecode:: ps_03_09
    :language: python
    :topics: Iteration/TheAccumulatorPatternwithLists

    Write a program that requests inputs from the user, repeatedly, until the user enters the word "stop". At
    the end it should print out a list containing all the words the user entered, in reverse order. So, if the user
    enters, in succession, ``You``, ``are``, ``smart``, and ``stop``, it will print out ``['smart', 'are', 'You']``

    ~~~~

    # Write your code here

    ====

    print("===========")
    print("\n\nThere are no tests for this problem")

.. activecode:: ps_03_10
    :language: python

    Write code and/or a python comment that demonstrates your understanding of the material in this problem set. Be sure to click "Run" even if it's just a comment, because that's what will save it so that we can grade it. This assignment requires effort and demonstration of true understanding and will be evaluated carefully (this does not mean it needs to be long, just clear and accurate. In fact, it should be brief; ideally just 2-3 sentences!).

    Your submission must be your own work (i.e., don't collaborate with other students on this problem even if you've been collaborating with them on the rest of the problems), and you must credit any resources you reference (you do not need to reference any).

    After grading, you will receive a response, in a comment, from an instructor, which will be visible on this assignment page. If you do not receive full credit for this problem, you may initiate a conversation with your GSI by adding a comment *on Canvas* on the graded assignment. If you want to update code here and refer to it in your Canvas comment, you can do that. There may be several rounds of comments and responses on Canvas before the GSI is satisfied that you have demonstrated a correct understanding. You must respond to the GSI within 48 hours in order for that conversation to remain "open". When the GSI is satisfied, they will update your grade accordingly.

    ~~~~


.. mchoice:: ps_03_11
   :practice: T
   :topics: Sequences/intro-Sequences

   What is immutability and what are the immutable data types?

   ..

   -   Immutability is when Python shuts you out of the program and doesn't let you code. Booleans are the only immutable data types.

       -   Incorrect!

   -   Immutability is when you cannot modify individual characters/components of a collection. Strings and Integers are the only immutable data types.

       -   Incorrect! The definition is correct, but the types are incomplete.

   -   Immutability is when you cannot modify individual characters/components of a collection. Strings, Integers, Floats, and Tuples are immutable data types.

       +   Correct!

   -   Immutability is when you cannot modify individual characters/components of a collection. Dictionaries and Lists are immutable.

       -   Incorrect! Dictionaries and lists are mutable.



.. mchoice:: ps_03_12
   :practice: T
   :topics: Sequences/StringsareImmutable

   What would the following print?

   .. code-block:: python

        s = "Hello"
        s[0] = "J"
        print(s)

   ..

   -   Hello

       -   Incorrect! Strings are immutable, meaning that you cannot modify an existing string.

   -   Jello

       -   Incorrect! Strings are immutable, meaning that you cannot modify an existing string.

   -   Error
       +   Correct! Strings are immutable, meaning that you cannot modify an existing string.

   -   J

       -   Incorrect! Strings are immutable, meaning that you cannot modify an existing string.


.. mchoice:: ps_03_13
   :practice: T
   :topics: Sequences/intro-Sequences

   ..

   Which of the following are true about aliasing?

   -   Aliasing is basically the following — Since variables refer to objects, if we assign one variable to another, both variables refer to the same object.

       +   Correct!

   -   Aliasing refers to a secret function within the Python programming language. Only super coders know what it is.

       -   Incorrect!

   -   Changes made to one alias do not affect the other.

       -   Incorrect!

   -   Changes made to one alias do affect the other.

       +   Correct!

   -   In general, it is safer to avoid aliasing when you are working with mutable objects.

       +   Correct!

   -   In general, it is safer to avoid aliasing when you are working with immutable objects.

       -   Incorrect! Immutable objects, such as strings, are not as affected as mutable objects.


.. mchoice:: ps_03_14
   :practice: T
   :topics: Tuples/Tuples

   Which of the following demonstrate mutability?

   .. code-block:: python

        # I.
        L= []
        L.append(4)

        # II.
        s = Tim
        s + "othy"
        print(s)

        # III.
        L= [1]
        L = L + [4, 7]

   ..

   -   I only

       +   Correct!

   -   II only

       -   Incorrect!

   -   III only

       -   Incorrect!

   -   I and II only

       -   Incorrect!

   -   I and III only

       -   Incorrect!

   -   II and III only

       -   Incorrect!

   -   I, II and III

       -   Incorrect!


.. activecode:: ps_03_15
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Tuples/Tuples

    The list of SI106 GSIs is assigned to the variable ``GSIs``. "Iman" is missing. Use lists' mutability feature to add
    "Iman" to the list. Note that after running your code, the variable ``GSIs`` should include all the 4 GSIs and you
    should not reassign the variable.
    ~~~~
    GSIs = ["Amanda", "Daphne", "Michael"]
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(GSIs, ["Amanda", "Daphne", "Michael", "Iman"], "Testing whether you have all the GSIs listed.")
            self.assertIn('.append(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
            self.assertNotIn('["Iman"]', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

    myTests().main()


.. activecode:: ps_03_16
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Tuples/Tuples

    The list of SI106 GSIs is assigned to the variable ``GSIs``. "Iman" is missing. Add "Iman" to the list through
    reassignment. Note that after running your code, the variable ``GSIs`` should include all the 4 GSIs and you
    should not append him to ``GSIs``.
    ~~~~
    GSIs = ["Amanda", "Daphne", "Michael"]

    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(GSIs, ["Amanda", "Daphne", "Michael", "Iman"], "Testing whether you have all the GSIs listed.")
            self.assertNotIn('.append(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

    myTests().main()


