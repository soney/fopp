.. _problem_set_02:

Problem Set 2
-------------

**Instructions:** Write the code you want to save in the provided boxes, and click **Save & Run** for each one. That will  *run* your code, so you can see the output, if any, and the result of the tests, if there are any. It will also *save* your code. You should run your code each time you want to save it. You can then load the history of the code you have run and saved. The *last* code you have saved for each problem by the deadline is what will be graded.



.. activecode:: ps_02_01
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/Stringsandforloops

    **1.** Write one for loop to print out each character of the string ``my_str`` on a separate line.
    ~~~~
    my_str = "MICHIGAN"

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

      def test_output(self):
        self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
        self.assertIn("M\nI\nC\nH\nI\nG\nA\nN", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

    myTests().main()


.. activecode:: ps_02_02
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/Listsandforloops

    **2.** Write one for loop to print out each element of the list ``several_things``. Then, write *another* for loop to print out the TYPE of each element of the list ``several_things``. To complete this problem you should have written two different for loops, each of which iterates over the list ``several_things``, but each of those 2 for loops should have a different result.
    ~~~~
    several_things = ["hello", 2, 4, 6.0, 7.5, 234352354, "the end", "", 99]

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

      def test_output(self):
          self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
          str1 = "hello\n2\n4\n6.0\n7.5\n234352354\nthe end\n\n99\n<class 'str'>\n<class 'int'>\n<class 'int'>\n<class 'float'>\n<class 'float'>\n<class 'int'>\n<class 'str'>\n<class 'str'>\n<class 'int'>"
          str2 = "hello\n2\n4\n6.0\n7.5\n234352354\nthe end\n\n99\n<type 'str'>\n<type 'int'>\n<type 'int'>\n<type 'float'>\n<type 'float'>\n<type 'int'>\n<type 'str'>\n<type 'str'>\n<type 'int'>"
          self.assertTrue(str1 in self.getOutput() or str2 in self.getOutput(), "Testing output (Don't worry about actual and expected values).")

    myTests().main()


.. activecode:: ps_02_03
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/Listsandforloops

    **3.** Write code that uses iteration to print out **the length** of each element of the list stored in ``str_list``. You should see:
    ~~~~
    str_list = ["hello", "", "goodbye", "wonderful", "I love Python"]

    # Write your code here.
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def test_output(self):
            self.assertIn("for", self.getEditorText(), "Testing whether you used a for loop (Don't worry about actual and expected values).")
            self.assertIn("5\n0\n7\n9\n13", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

    myTests().main()


.. activecode:: ps_02_04
    :language: python
    :topics: Iteration/Listsandforloops

    **4.** Write a program that uses the turtle module and a for loop to draw something. It doesn't have to be complicated, but draw something different than we did in the textbook or in class. (Optional but encouraged: post a screenshot of the artistic outcome to Facebook, or a short video of the drawing as it is created.) (Hint: if you are drawing something complicated, it could get tedious to watch it draw over and over. Try setting ``.speed(10)`` for the turtle to draw fast, or ``.speed(0)`` for it to draw super fast with no animation.)
    ~~~~
    import turtle


.. activecode:: ps_02_05
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPatternwithStrings

    **5.** Write code to count the number of characters in ``original_str`` using the accumulation pattern and assign the answer to a variable ``num_chars``. Do NOT use the ``len`` function to solve the problem (if you use it while you are working on this problem, comment it out afterward!)
    ~~~~
    original_str = "The quick brown rhino jumped over the extremely lazy fox."


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(num_chars, len(original_str), "Testing whether num_chars_sent has the correct value")
           self.assertNotIn('len', self.getEditorText(), "Testing that you are not including the len function in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


.. activecode:: ps_02_06
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPatternwithLists

    **6.** Write code to create a **list of word lengths** for the words in ``original_str`` using the accumulation pattern and assign the answer to a variable ``num_words_list``. (You should use the ``len`` function).

    ~~~~
    original_str = "The quick brown rhino jumped over the extremely lazy fox."


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(num_words_list, map(len, original_str.split()), "Testing whether num_words_list has the correct value")
           self.assertIn('for', self.getEditorText(), "Testing that you are using a for loop in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


.. activecode:: ps_02_07
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPatternwithLists

    **7.** ``addition_str`` is a string with a list of numbers separated by the ``+`` sign. Write code that uses the accumulation pattern to take the sum of all of the numbers and assigns it to ``sum_val`` (an integer). (You should use the ``.split("+")`` function to split by ``"+"`` and ``int()`` to cast to an integer).

    ~~~~
    addition_str = "2+5+10+20"


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(sum_val, 37, "Testing whether sum_val has the correct value")

    myTests().main()


.. activecode:: ps_02_08
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Iteration/TheAccumulatorPatternwithLists

    **8.** ``week_temps_f`` is a string with a list of fahrenheit temperatures separated by the ``,`` sign. Write code that uses the accumulation pattern to compute the **average** (sum divided by number of items) and assigns it to ``avg_temp``. Do not hard code your answer (i.e., make your code compute both the sum or the number of items in ``week_temps_f``) (You should use the ``.split(",")`` function to split by ``","`` and ``float()`` to cast to a float).

    ~~~~
    week_temps_f = "75.1,77.7,83.2,82.5,81.0,79.5,85.7"


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
            self.assertAlmostEqual(avg_temp, 80.67142857142858, 7, "Testing that avg_temp has the correct value")

    myTests().main()


.. activecode:: ps_02_09
    :language: python

    **9.** Write code and/or a python comment that demonstrates your understanding of the material in this problem set. Be sure to click "Run" even if it's just a comment, because that's what will save it so that we can grade it. This assignment requires effort and demonstration of true understanding and will be evaluated carefully (this does not mean it needs to be long, just clear and accurate. In fact, it should be brief; ideally just 2-3 sentences!).

    Your submission must be your own work (i.e., don't collaborate with other students on this problem even if you've been collaborating with them on the rest of the problems), and you must credit any resources you reference (you do not need to reference any).

    After grading, you will receive a response, in a comment, from an instructor, which will be visible on this assignment page. If you do not receive full credit for this problem, you may initiate a conversation with your GSI by adding a comment *on Canvas* on the graded assignment. If you want to update code here and refer to it in your Canvas comment, you can do that. There may be several rounds of comments and responses on Canvas before the GSI is satisfied that you have demonstrated a correct understanding. You must respond to the GSI within 48 hours in order for that conversation to remain "open". When the GSI is satisfied, they will update your grade accordingly.

    ~~~~


.. mchoice:: ps_02_10
   :practice: T
   :topics: Iteration/Listsandforloops

   What will the following code snippet print?

   .. code-block:: python

        umich = ["LSA", "SI", "SMTD", "Engineering"]
        for school in range(len(umich)):
            print(umich[school])

   ..

   -   LSA

       -   Incorrect!

   -   Engineering

       -   Incorrect!

   -   LSA

       SI

       SMTD

       Engineering

       +   Correct!


.. mchoice:: ps_02_11
   :practice: T
   :topics: Iteration/TheAccumulatorPattern

   What would be the value of ``accum`` after executing the following code?

   .. code-block:: python

        lst = [1, 2, 3, 4, 5]
        for num in lst:
             accum = 0
             accum += num

   ..

   -   0

       -   Incorrect! The accumulator variable is initialized to 0 in the last iteration of the ``for`` loop, but the variable is then also updated in the second line of the ``for`` loop.

   -   15

       -   Incorrect!

   -   5
       +   Correct!

   -   1

       -   Incorrect!


.. mchoice:: ps_02_12
   :practice: T
   :topics: Iteration/Stringsandforloops

   What will print and how many times will it be printed?

   .. code-block:: python

        p = "Hello world!"
        for char in p:
            print("fruits")

   ..

   -   "Hello world!" will be printed 1 time.

       -   Incorrect!

   -   "Hello world!" will be printed 6 times.

       -   Incorrect!

   -   "fruits" will be printed 1 times.

       -   Incorrect!

   -   "fruits" will be printed 10 times.

       -   Incorrect!

   -   "fruits" will be printed 11 times.

       -   Incorrect!

   -   "fruits" will be printed 12 times.

       +   Correct!


.. mchoice:: ps_02_13
   :practice: T
   :topics: Iteration/TheforLoop

   How many times is the loop body executed for the following code?

   .. code-block:: python

        for name in ["Joe", "Amy", "Brad", "Angelina", "Zuki", "Thandi", "Paris"]:
            print("Hi", name, "Please come to my party on Saturday!")

   ..

   -   7

       +   Correct!

   -   5

       -   Incorrect!

   -   6

       -   Incorrect!

   -   8

       -   Incorrect!

