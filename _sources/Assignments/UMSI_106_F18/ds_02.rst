.. _discussion_section_02:

Week 2 Discussion Section
-------------------------

.. activecode:: ds_02_01
    :include: sqrt_fn
    :language: python
    :autograde: unittest
    :topics: SimplePythonData/FunctionCalls

    **1.** Suppose the ``sqrt()`` function returns the square root of its arguments. Write a statement that will assign the square root of ``a`` squared plus the value of ``b`` squared (Pythagorean theorem) to a variable ``c``.
    ~~~~
    a = 3.0
    b = 4.0

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertAlmostEqual(c, 5.0, 7, "Testing that c has the correct value")
        def testTwo(self):
            self.assertIn('sqrt', self.getEditorText(), "Testing that sqrt is in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


.. activecode:: ds_02_02
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Sequences/OperationsonStrings

    **2.** Write code that asks the user to enter their name and then prints out ``"Hello, <name>!"``.
    ~~~~

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
            self.assertIn('input', self.getEditorText(), "Testing that 'input' is in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


.. activecode:: ds_02_03
    :language: python
    :autograde: unittest

    **3.** Write code that asks the user to enter a temperature in Fahrenheit and prints that temperature in Celsius. The formula to convert Fahrenheit to Celsius is: C = (F-32)*5/9. For example, if the user enters 90, your program should output 32.222. If the user enters -20, your code should output -28.888.
    ~~~~

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
            self.assertIn('input', self.getEditorText(), "Testing that 'input' is in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


.. **4.** Here's a complicated expression, using the Turtle framework. Arrange these sentences in the order they are executed in the following code, like you did in an exercise in Chapter 2 of the textbook. (It may help to think about what specifically is happening in the first four lines of code as well.)
..
..     .. sourcecode:: python
..
..          import turtle
..
..          ella = turtle.Turtle()
..          x = "hello class".find("o") - 1
..          ella.speed = 3
..
..
..          ella.move(square(x*ella.speed))
..
..     .. parsonsprob:: ds_02_04
..
..        Order the code fragments in the order in which the Python interpreter would evaluate them, when evaluating that last line of code.
..
..        -----
..        Look up the variable ella and find that it is an instance of a Turtle object
..        =====
..        Look up the attribute move of the Turtle ella and find that it's a method object
..        =====
..        Look up the function square
..        =====
..        Look up the value of the variable x and find that it is an integer
..        =====
..        Look up the value of the attribute speed of the instance ella and find that it is an integer
..        =====
..        Evaluate the expression x * ella.speed to one integer
..        =====
..        Call the function square on an integer value
..        =====
..        Call the method .move of the Turtle ella on its input integer
..


.. parsonsprob:: ds_02_04
   :practice: T
   :topics: SimplePythonData/StatementsandExpressions

   <b>4.</b> Order the code fragments in the order in which the Python interpreter would evaluate them.<br>
   <code>
       x = 1<br>
       y = 2<br>
       square(x + square(y))
   </code>

   -----
   assign 1 to x
   =====
   assign 2 to y
   =====
   look up the variable square to get the function object
   =====
   look up the variable x to get 1
   =====
   look up square, again, to get the function object
   =====
   look up the variable y to get 2
   =====
   run the square function on input 2, returning the value 4
   =====
   add 1 and 4 to get 5
   =====
   run the square function, again, on input 5, returning the value 25


.. activecode:: ds_02_05
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Sequences/IndexOperatorWorkingwiththeCharactersofaString

    **5.** Write code that assigns the **last** element of the sequence ``S`` to ``last_elem``. Don't hard-code your answer (in other words, if we changed ``S``, your answer should still be valid)
    ~~~~
    S = ["ab", "cd", "ef", "gh"]

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(last_elem, "gh", "Testing that 'gh' is assigned to last_elem.")

    myTests().main()

.. activecode:: ds_02_06
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Sequences/SplitandJoin

    **6.** Write code that assigns the *last letter of the first word* of the sentence ``S`` to ``last_letter_first_word``. Do not hard-code your answer.
    ~~~~
    S = "this is a sentence"

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(last_letter_first_word, "s", "Testing that 's' is assigned to last_letter_first_word.")

    myTests().main()

.. activecode:: ds_02_07
    :language: python
    :autograde: unittest
    :practice: T
    :topics: Sequences/SplitandJoin

    **7.** Write code that asks the user to enter a sentence and then prints out the *number of words in that sentence*.
    ~~~~
    S = input("Enter a sentence: ")

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertIn('split', self.getEditorText(), "Testing that split is in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()



.. activecode:: ds_02_08
    :language: python

    **8.** Add comments to the following code. In particular, which line creates a turtle object, and which line or lines invoke methods on the turtle. For method invocations, what is the name of the method, what causes the method to be invoked, and what are the arguments passed to it.

    ~~~~
    import turtle             # allows us to use the turtles library
    wn = turtle.Screen()      # creates a graphics window
    alex = turtle.Turtle()
    alex.forward(150)
    alex.left(90)
    alex.forward(75)


.. activecode:: sqrt_fn
    :language: python
    :nopre:
    :hidecode:

    (This is not a question) The code below defines the function ``sqrt()``. Do not modify it, but feel free to take a look.

    ~~~~

    def sqrt(num):
        return num**0.5


