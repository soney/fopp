.. _Final_Exam_F15/q_17:

Final Exam Fall 2015 - Question 17
------------------------------------


.. mchoice:: Final_Exam_F15_q_17
    :practice: T
    :topics: Final_Exam_F15/q_17

    We have provided you with a separate code printout of the revised Tamagotchi
    program from the textbook (with a couple small additions that will be mentioned
    below).

    To test the teach method of the Pet class, would you use a return value test or a side effect test?

    .. sourcecode:: python

      from random import randrange
      class Pet():
           boredom_decrement = 4
           hunger_decrement = 6
           boredom_threshold = 5
           hunger_threshold = 10
           sounds = ['Mrrp']
           def __init__(self, name = "Kitty"):
               self.name = name
               self.hunger = randrange(self.hunger_threshold)
               self.boredom = randrange(self.boredom_threshold)
               self.sounds = self.sounds[:]   # Copy the class attribute, so that when we make changes to it, we won't affect the other pets in the class.

           def clock_tick(self):
               self.boredom += 1
               self.hunger += 1

           def mood(self):
               if self.hunger <= self.hunger_threshold and self.boredom <= self.boredom_threshold:
                   return "happy"
               elif self.hunger > self.hunger_threshold:
                   return "hungry"
               else:
                   return "bored"

           def __str__(self):
               return "\tI'm {}. I feel {}.".format(self.name, self.mood())

           def hi(self):
               print(self.sounds[randrange(len(self.sounds))])
               self.update_boredom()

           def teach(self, word):
               self.sounds.append(word)
               self.update_boredom()

           def feed(self):
               self.update_hunger()

           def update_hunger(self):
               self.hunger = max(0, self.hunger - self.hunger_decrement)

           def update_boredom(self):
               self.boredom = max(0, self.boredom - self.boredom_decrement)

      def whichone(petlist, name):
         for pet in petlist:
            if pet.name == name:
               return pet
         return None   # No pet matched.

      def play():
         animals = []
         option = ""
         while True:
            action = input("""
               Quit
               Adopt <petname_with_no_spaces_please>
               Greet <petname>
               Teach <petname> <word>
               Feed <petname>

               Choice: """)

            words = action.split()
            if len(words) > 0:
                command = words[0]
            else:
                command = None
            if command == "Quit":
                print("Exiting...")
                return None
            elif command == "Adopt" and len(words) > 1:
                if whichone(animals, words[1]):
                    print("You already have a pet with that name")
                else:
                    animals.append(Pet(words[1]))
            elif command == "Greet" and len(words) > 1:
                pet = whichone(animals, words[1])
                if not pet:
                    print("I didn't recognize that pet name. Please try again.")
                else:
                    pet.hi()
            elif command == "Teach" and len(words) > 2:
                pet = whichone(animals, words[1])
                if not pet:
                    print("I didn't recognize that pet name. Please try again.")
                else:
                    pet.teach(words[2])
            elif command == "Feed" and len(words) > 1:
                pet = whichone(animals, words[1])
                if not pet:
                    print("I didn't recognize that pet name. Please try again.")
                else:
                    pet.feed()
            else:
                print("I didn't understand that. Please try again.")

            for pet in animals:
                pet.clock_tick()
                print(pet)
      play()
    ..

    -   Return value test

        -   Incorrect!

    -   Side effect test

        +   Correct!

